apply plugin: 'idea'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.example.tinyjavaposttester"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "$version"
        //multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("${projectDir}/tinyJavaPOSTester-release-key.keystore")
            storePassword "123456"
            keyAlias "tinyJavaPOSTester"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release


        }
    }
//
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            outputFileName = "myapp-${variant.versionName}-${variant.name}.apk"
//        }
//    }

    productFlavors {
    }

    sourceSets {
        main {
            java {
                srcDirs = ["${projectDir}/src"]
            }
            res {
                srcDirs = ["${projectDir}/res"]
            }
            assets {
                srcDirs = ["${projectDir}/assets"]
            }
            manifest {
                srcFile "${projectDir}/AndroidManifest.xml"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    def releasePath = file("${rootDir}/../../dist/zip/android")

    def releaseTask = tasks.create(name: 'release') {
        group 'Build'
        description "Assembles and archives all Release builds"
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {

            variant.outputs.all {
                outputFileName = apkName()
            }

            // https://gist.github.com/lifuzu/9553671
            def build = variant.name.capitalize()

            def releaseBuildTask = tasks.create(name: "release${build}", type: Copy) {
                group 'Build'
                description "Assembles and archives apk and its proguard mapping for the $build build"

                def apkPath = "${rootDir}/tinyJavaPosTester/build/outputs/apk/release/" + apkName()

                from apkPath
                into releasePath
            }

            releaseBuildTask.dependsOn variant.assemble

            releaseTask.dependsOn releaseBuildTask

//            variant.productFlavors.each { flavor ->
//                def flavorName = flavor.name.capitalize()
//                def releaseFlavorTaskName = "release${flavorName}"
//                def releaseFlavorTask
//                if (tasks.findByName(releaseFlavorTaskName)) {
//                    releaseFlavorTask = tasks[releaseFlavorTaskName]
//                } else {
//                    releaseFlavorTask = tasks.create(name: releaseFlavorTaskName) {
//                        group 'Build'
//                        description "Assembles and archives all Release builds for flavor $flavorName"
//                    }
//                    releaseTask.dependsOn releaseFlavorTask
//                }
//                releaseFlavorTask.dependsOn releaseBuildTask
//            }
        }
    }
}

repositories {
    jcenter()

    flatDir {
        dirs = ['../lib']
    }
}

dependencies {
    //compile fileTree(include: ['*.jar'], dir: '../lib')
    compile project(':FptrServiceAndroid')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:support-v4:26.1.0'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.github.tony19:logback-android-core:1.1.1-6'
    compile('com.github.tony19:logback-android-classic:1.1.1-6') {
        // workaround issue #73
        exclude group: 'com.google.android', module: 'android'
    }

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.0.0"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0"
}

def apkName() {
    return "tinyJavaPosTester_v${version}.apk";
}
